# Combine into a data frame
df <- bind_cols(attributes, geometry) %>%
filter(!is.na(geometry))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(out)
}
query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
# Combine into a data frame
df <- bind_cols(attributes, geometry) %>%
filter(!is.na(LATITUDE))
query.arbmap <- function(url){
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
attributes <- data_list$features$attributes
geometry <- data_list$features$geometry
# Combine into a data frame
df <- bind_cols(attributes, geometry) %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(out)
}
query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
url <- "https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json"
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
attributes <- data_list$features$attributes
geometry <- data_list$features$geometry
View(attributes)
# Extract attributes and geometry
df <- data_list$features$attributes %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
View(sf.out)
# clear environment
rm(list = ls())
# load packages
library(httr)
library(jsonlite)
library(sf)
library(dplyr)
# high-level functions
# function to get JSON data from the arb GIS site and convert to sf
query.arbmap <- function(url){
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
df <- data_list$features$attributes %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(out)
}
# load data
plantAll.sf <- query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
# clear environment
rm(list = ls())
# load packages
library(httr)
library(jsonlite)
library(sf)
library(dplyr)
# high-level functions
# function to get JSON data from the arb GIS site and convert to sf
query.arbmap <- function(url){
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
df <- data_list$features$attributes %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(sf.out)
}
# load data
plantAll.sf <- query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
View(plantAll.sf)
plot(plantAll.sf)
plantAll.sf %>%
mutate(fullName = paste(GENUS, SPECIES, INFRASPECIFIC_RANK, INFRASPECIFIC_EPITHET, CULTIVAR))
plantAll.sf %>%
mutate(fullName = paste(GENUS, SPECIES))
plantAll.sf %>%
mutate(across(where(is.character), ~ coalesce(., "")))
plantAll.sf %>%
# remove NA in character columns and replace with blank
mutate(across(where(is.character), ~ coalesce(., ""))) %>%
# make a full name column
mutate(fullName = paste(GENUS, SPECIES, INFRASPECIFIC_RANK, INFRASPECIFIC_EPITHET, CULTIVAR))
plantAll.sf <- plantAll.sf %>%
# remove NA in character columns and replace with blank
mutate(across(where(is.character), ~ coalesce(., ""))) %>%
# make a full name column
mutate(fullName = paste(GENUS, SPECIES, INFRASPECIFIC_RANK, INFRASPECIFIC_EPITHET, CULTIVAR))
library(stringr)
plantAll.sf <- query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
plantAll.sf <- plantAll.sf %>%
mutate(
fullName = paste0(
GENUS, " ", SPECIES,
# Add infraspecific rank + epithet if present
if_else(
!is.na(INFRASPECIFIC_RANK) & INFRASPECIFIC_RANK != "" &
!is.na(INFRASPECIFIC_EPITHET) & INFRASPECIFIC_EPITHET != "",
paste0(" ", INFRASPECIFIC_RANK, " ", INFRASPECIFIC_EPITHET),
""
),
# Else add cultivar in quotes if present
if_else(
(is.na(INFRASPECIFIC_RANK) | INFRASPECIFIC_RANK == "" |
is.na(INFRASPECIFIC_EPITHET) | INFRASPECIFIC_EPITHET == "") &
!is.na(CULTIVAR) & CULTIVAR != "",
paste0(" '", CULTIVAR, "'"),
""
)
)
)
plantAll.sf
View(plantAll.sf)
plantAll.sf <- plantAll.sf %>%
mutate(
fullName = paste0(
#combine genus + species
GENUS, " ", SPECIES,
# Add infraspecific rank + epithet if present
if_else(
!is.na(INFRASPECIFIC_RANK) & INFRASPECIFIC_RANK != "" &
!is.na(INFRASPECIFIC_EPITHET) & INFRASPECIFIC_EPITHET != "",
paste0(" ", INFRASPECIFIC_RANK, " ", INFRASPECIFIC_EPITHET),
""
),
# Else add cultivar in quotes if present
if_else(
(is.na(INFRASPECIFIC_RANK) | INFRASPECIFIC_RANK == "" |
is.na(INFRASPECIFIC_EPITHET) | INFRASPECIFIC_EPITHET == "") &
!is.na(CULTIVAR) & CULTIVAR != "",
paste0(" '", CULTIVAR, "'"),
""
)
)
)
plot(plantAll.sf$ACC_NUM_AND_QUAL)
plot(plantAll.sf$geometry)
url <- "https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/28/query?where=1=1&outFields=*&f=json"
layer28_sf <- st_read(url)
structures_url <- paste0(
"https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30/query?",
"where=1%3D1&outFields=*&f=geojson"
)
structures <- st_read(structures_url)
plot(structures$geometry)
View(structures)
query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30/query?where=1%3D1&outFields=*&f=geojson")
install.packages("esri2sf")
library(remotes)
install_github("yonghah/esri2sf")
library(remotes)
install_github("yonghah/esri2sf")
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30")
library(esri2sf)
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30")
View(structures)
plot(structures$geoms)
View(structures[[11]][[1]])
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30?f=pjson")
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/30/query?where=1%3D1&outFields=*&returnGeometry=true&f=geojson")
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/28")
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/29")
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/31")
plot(structures$geoms)
structures <- esri2sf("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/31")
View(structures)
View(structures)
structures <- esri2sf(url = "https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/31",
where = "1=1")
plot(structures$geoms)
# clear environment
rm(list = ls())
# load packages
library(httr)
library(jsonlite)
library(sf)
library(dplyr)
library(stringr)
library(esri2sf)
library(ggplot2)
# high-level functions
# function to get JSON data from the arb GIS site and convert to sf
query.arbmap <- function(url){
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
df <- data_list$features$attributes %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(sf.out)
}
# load data
plantAll.sf <- query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
plantWant <- read.csv("cutDownList.csv")
setwd("C:/Users/mclas/Documents/Harvard/projectWork/data/plantSelection/mappers")
# clear environment
rm(list = ls())
# load packages
library(httr)
library(jsonlite)
library(sf)
library(dplyr)
library(stringr)
library(esri2sf)
library(ggplot2)
# high-level functions
# function to get JSON data from the arb GIS site and convert to sf
query.arbmap <- function(url){
# Get JSON response
response <- httr::GET(url)
# Parse JSON
data_json <- httr::content(response, as = "text", encoding = "UTF-8")
data_list <- jsonlite::fromJSON(data_json)
# Extract attributes and geometry
df <- data_list$features$attributes %>%
filter(!is.na(LATITUDE))
# Convert to sf object (assuming coordinates are in WGS84 - EPSG:4326)
sf.out <- sf::st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
return(sf.out)
}
# load data
plantAll.sf <- query.arbmap("https://map.arboretum.harvard.edu/arcgis/rest/services/CollectionExplorer/MapServer/34/query?where=IS_DEAD%3D0&outFields=ACC_NUM_AND_QUAL,FAMILY,GENUS,SPECIES,INFRASPECIFIC_RANK,INFRASPECIFIC_EPITHET,CULTIVAR,LATITUDE,LONGITUDE&returnGeometry=true&f=json")
plantWant <- read.csv("cutDownList.csv")
paths <- st_read("shpFiles/Paths.shp")
structures <- st_read("shpFiles/Structures.shp")
water <- st_read("shpFiles/Hydrology.shp")
roads <- st_read("shpFiles/RoadsMajorPaths.shp")
paths <- st_transform(paths, st_crs(plantAll.sf))
structures <- st_transform(structures, st_crs(plantAll.sf))
water <- st_transform(water, st_crs(plantAll.sf))
roads <- st_transform(roads, st_crs(plantAll.sf))
# refine plant data
plantAll.sf <- plantAll.sf %>%
mutate(
fullName = paste0(
#combine genus + species
GENUS, " ", SPECIES,
# Add infraspecific rank + epithet if present
if_else(
!is.na(INFRASPECIFIC_RANK) & INFRASPECIFIC_RANK != "" &
!is.na(INFRASPECIFIC_EPITHET) & INFRASPECIFIC_EPITHET != "",
paste0(" ", INFRASPECIFIC_RANK, " ", INFRASPECIFIC_EPITHET),
""
),
# Else add cultivar in quotes if present
if_else(
(is.na(INFRASPECIFIC_RANK) | INFRASPECIFIC_RANK == "" |
is.na(INFRASPECIFIC_EPITHET) | INFRASPECIFIC_EPITHET == "") &
!is.na(CULTIVAR) & CULTIVAR != "",
paste0(" '", CULTIVAR, "'"),
""
)
)
) %>%
rename(Family = FAMILY, Genus = GENUS, Species = SPECIES) %>%
mutate(colorgroup = ifelse(Family %in% plantWant$Family, Family, "grey"))
targetable <- plantWant %>%
left_join(plantAll.sf, by = c("Family", "Genus", "Species")) %>%
filter(!is.na(ACC_NUM_AND_QUAL)) %>%
mutate(Binomial = paste(Genus, Species))
# how many species are there?
length(unique(targetable$Binomial))
# 137
# how many of them have individuals that are not variants, forms, etc.
easyOnes <- targetable %>%
filter(is.na(INFRASPECIFIC_EPITHET) &
is.na(CULTIVAR)) %>%
distinct(Binomial)
nrow(easyOnes)
# only 122. So, my choices will be easy for those. Now let's look at the 122
hardOnes <- targetable %>%
filter(!is.na(INFRASPECIFIC_EPITHET) |
!is.na(CULTIVAR)) %>%
filter(!Binomial %in% easyOnes$Binomial)
# case by case basis here we come!
# what I'm going to do is eliminate the ones I don't want to be in the pool
# then pull from the undesirables when the randomization occurs
eliminateAccsHard <- c("2163-65*A", # the one V. carlesii cultivar
# V. nudum 'Bulk' has no leaf changes (berry only) but 'Winterthur' does
"565-2016*C", "565-2016*B", "565-2016*E", "565-2016*F", "141-2019*A",
"565-2016*A", "565-2016*G", "228-2014*B", "228-2014*A",
# E. fortunei 'Coloratus' is somewhat considered a variant, so I'm keeping just that
"6841-1*A",
# I'm going to ignore the A. altissima in the AA and just use wild or greenhouse ones
"695-80*B", "203-35*B"
)
eliminateAccs <- targetable %>%
filter(!is.na(INFRASPECIFIC_EPITHET) |
!is.na(CULTIVAR)) %>%
filter(Binomial %in% easyOnes$Binomial) %>%
pull(ACC_NUM_AND_QUAL) %>%
c(eliminateAccsHard)
# the moment we've all been waiting for!
set.seed(42325)
samplePlants <- targetable %>%
filter(!ACC_NUM_AND_QUAL %in% eliminateAccs) %>%
arrange(Binomial, ACC_NUM_AND_QUAL) %>%
group_by(Binomial) %>%
slice_sample(n = 1) %>%
select(id = ACC_NUM_AND_QUAL, Family, Genus,
Species, Binomial, colorgroup,
geometry) %>%
arrange(Family, Genus, Species) %>%
st_as_sf()
plantAll.sf <- plantAll.sf[!plantAll.sf$ACC_NUM_AND_QUAL %in% samplePlants$id, ]
# okay, now I need to make maps that help me find these plants
library(ggrepel)
library(patchwork)
library(ggspatial)
makeMap <- function(xrange, yrange, tittl){
group_colors <- c(
"grey" = "black",
"Adoxaceae" = "#ff7f0e",
"Berberidaceae" = "#2ca02c",
"Caprifoliaceae" = "#d62728",
"Celastraceae" = "#9467bd",
"Elaeagnaceae" = "#8c564b",
"Moraceae" = "#e377c2",
"Rhamnaceae" = "gold",
"Simaroubaceae" = "blue"
)
# Extract coordinates and combine with original data
sample_coords <- samplePlants %>%
cbind(st_coordinates(.)) %>%
filter(X >= xrange[1] + buffer * xit, X <= xrange[2] - buffer * xit,
Y >= yrange[1] + buffer * yit, Y <= yrange[2] - buffer * yit)
allBox <- plantAll.sf %>%
cbind(st_coordinates(.)) %>%
filter(X >= xrange[1], X <= xrange[2],
Y >= yrange[1], Y <= yrange[2])
# paths_sub <- paths %>%
#   filter(st_intersects(., st_as_sfc(st_bbox(c(xmin = xrange[1], xmax = xrange[2],
#                                               ymin = yrange[1], ymax = yrange[2])),
#                                     crs = st_crs(paths)), sparse = FALSE))
#
bbox_matrix <- matrix(
c(
xrange[1], yrange[1],  # lower-left
xrange[2], yrange[1],  # lower-right
xrange[2], yrange[2],  # upper-right
xrange[1], yrange[2],  # upper-left
xrange[1], yrange[1]   # close the polygon
),
ncol = 2,
byrow = TRUE
)
# Turn matrix into an sf polygon
bbox_poly <- st_polygon(list(bbox_matrix)) %>%
st_sfc(crs = st_crs(samplePlants)) %>%  # use same CRS as your data
st_sf()  # convert to sf object
# Now plot, using only the filtered data for labels
main <- ggplot() +
geom_sf(data = roads, linewidth = 1, fill = "black", color = "grey60", alpha = 0.25) +
geom_sf(data = paths, linewidth = 1.45, color = "black", alpha = 0.3) +
geom_sf(data = paths, linewidth = 1.2, color = "black", alpha = 0.1) +
geom_sf(data = water, linewidth = 1.3, color = "blue", alpha = 0.3) +
geom_sf(data = structures) +
geom_sf(data = samplePlants, aes(color = colorgroup)) +
geom_sf(data = plantAll.sf, alpha = 0.2, aes(color = colorgroup)) +
geom_text_repel(
data = sample_coords,
aes(x = X, y = Y, label = paste(id, Binomial, sep = "\n")),
size = 2,
point.padding = .2,
segment.color = "black",
max.overlaps = Inf,
min.segment.length = 0,
fontface = "bold"
) +
scale_color_manual(values = group_colors) +
geom_text_repel(
data = allBox,
aes(x = X, y = Y, label = ACC_NUM_AND_QUAL),
size = 0.9,
point.padding = 0.1,
segment.alpha = 0.1,
max.overlaps = 25
) +
coord_sf(xlim = xrange, ylim = yrange) +
theme_minimal() +
ggtitle(tittl) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
legend.position = "none",
title = element_text(family = "serif", size = 24, face = "bold"),
panel.grid = element_blank()) +
annotation_scale(location = "br",
width_hint = 0.25,
unit_category = "imperial")
return(main)
}
# trying to iterate this rationally
# I like the size of 0.005x and 0.002y
# let's try to tile the whole map starting with the south map
# actually that's a bit big for when it gets really dense, so let's halve it
# then I'll pick what I actually want to print
allbox <- st_bbox(samplePlants)
allbox <- allbox + c(-0.0004, -0.0004, 0.0004, 0.0004)
xgrid <- seq(allbox[1], allbox[3], length.out = 5) # 6 is perfect, about 0.004
ygrid <- seq(allbox[2], allbox[4], length.out = 8) # 15 is pretty good, 0.0013
xit <- xgrid[2] - xgrid[1]
yit <- ygrid[2] - ygrid[1]
polygons <- list()
id <- 1
for (i in seq_len(length(xgrid) - 1)) {
for (j in seq_len(length(ygrid) - 1)) {
coords <- matrix(c(
xgrid[i],     ygrid[j],
xgrid[i + 1], ygrid[j],
xgrid[i + 1], ygrid[j + 1],
xgrid[i],     ygrid[j + 1],
xgrid[i],     ygrid[j]        # close the polygon
), ncol = 2, byrow = TRUE)
poly <- st_polygon(list(coords))
polygons[[id]] <- poly
id <- id + 1
}
}
# Create an sf object with the polygons
grid_sf <- st_sf(
geometry = st_sfc(polygons),
crs = 4326  # You can change this to match your map's CRS
)
hasPlant <- st_intersects(grid_sf, samplePlants) %>%
sapply(length) > 0
numPlant <- st_intersects(grid_sf, samplePlants) %>%
sapply(length)
grid_sf$numPlant <- numPlant
grid_sf <- grid_sf[hasPlant, ]
ggplot() +
geom_sf(data = samplePlants) +
geom_sf(data = paths) +
geom_sf(data = grid_sf, fill = NA)
buffer <- 0.0025
# for(i in 1:nrow(grid_sf)){
#   bbi <- st_bbox(grid_sf[i,])
#   makeMap(as.numeric(unlist(bbi[c(1,3)])) + c(-buffer * xit, buffer * xit),
#           as.numeric(unlist(bbi[c(2,4)])) + c(-buffer * yit, buffer * yit),
#           i)
#
#   ggsave(paste0(i, "Map.png"), dpi = 1200,
#          width = 11, height = 8.5, unit = "in")
# }
group_colors <- c(
"grey" = "black",
"Adoxaceae" = "#ff7f0e",
"Berberidaceae" = "#2ca02c",
"Caprifoliaceae" = "#d62728",
"Celastraceae" = "#9467bd",
"Elaeagnaceae" = "#8c564b",
"Moraceae" = "#e377c2",
"Rhamnaceae" = "gold",
"Simaroubaceae" = "blue"
)
grid_sf$grid_id <- 1:nrow(grid_sf)
ggplot() +
geom_sf(data = paths, alpha = 0.75) +
geom_sf(data = roads, alpha = 0.75, fill = "grey75") +
geom_sf(data = water, color = "lightblue") +
geom_sf(data = structures, alpha = 0.75) +
geom_sf(data = samplePlants, aes(color = colorgroup), size = 3) +
# scale_color_discrete(name = "Family") +
geom_sf(data = grid_sf, fill = NA) +
geom_sf_text(data = grid_sf, aes(label = grid_id), fontface = "bold") +
geom_sf_text(data = grid_sf, aes(label = paste(numPlant, "plants")), nudge_y = -0.0006, size = 2) +
theme_minimal() +
scale_color_manual(values = group_colors, name = "Family") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
# legend.position = "none",
panel.grid = element_blank(),
text = element_text(size = 18))
# ggsave("cover.png", dpi = 1200,
#        width = 8.5, height = 11, unit = "in")
# make spreadsheet
whichPlants <- st_intersects(grid_sf, samplePlants)
eachGrid <- lapply(whichPlants, FUN = function(w){
return(samplePlants[w,])
})
plantSheet <- eachGrid %>%
bind_rows(.id = "gridNum") %>%
as.data.frame() %>%
select(gridNum, id, Binomial, Family)
plantSheet[rep(1:nrow(plantSheet), each = 5), ] %>%
mutate(leafNum = rep(1:5, nrow(plantSheet))) %>%
write.csv("plantSheetLeaves.csv", row.names = F)
